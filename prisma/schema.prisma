generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String   @id @default(cuid())
  email       String   @unique
  name        String?
  image       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  clerkUserId String?  @unique
  Joueur      Joueur[]
}

model Carte {
  id             Int           @id @default(autoincrement())
  nom            String
  couleur        Couleur?
  bout           Boolean
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  atout          Boolean
  image1         String?
  image2         String?
  chienId        Int?
  joueurId       String?
  valeur         Int?
  pliDefenseurId Int?
  pliPreneurId   Int?
  mancheId       Int?
  currentPliId   Int?
  points         Float
  ordre          Int?
  Chien          Chien?        @relation(fields: [chienId], references: [id])
  CurrentPli     CurrentPli?   @relation(fields: [currentPliId], references: [id])
  joueur         Joueur?       @relation("JoueurCartes", fields: [joueurId], references: [id])
  PliDefenseur   PliDefenseur? @relation(fields: [pliDefenseurId], references: [id])
  PliPreneur     PliPreneur?   @relation(fields: [pliPreneurId], references: [id])
}

model Partie {
  id             Int            @id @default(autoincrement())
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  nombreJoueurs  Int            @db.SmallInt
  donneur        Int            @default(0)
  status         String         @default("EN_ATTENTE")
  tourActuel     Int            @default(0)
  mancheActuelle Int            @default(1)
  actionsJoueurs ActionJoueur[]
  invitations    Invitation[]
  joueurs        Joueur[]
  manches        Manche[]
}

model Joueur {
  id                   String         @id @default(cuid())
  userId               String
  partieId             Int
  pseudo               String?
  score                Int            @default(0)
  seatIndex            Int
  actionsJoueurs       ActionJoueur[]
  cartes               Carte[]        @relation("JoueurCartes")
  partie               Partie         @relation(fields: [partieId], references: [id])
  user                 User           @relation(fields: [userId], references: [id])
  manchesPreneur       Manche[]       @relation("Preneur")
  plisPreneurGagnes    PliPreneur[]   @relation("GagnantPliPreneur")
  currentPlis          CurrentPli[]   @relation("CurrentPliToJoueur")
  manches              Manche[]       @relation("JoueurToManche")
  plisDefenseursGagnes PliDefenseur[] @relation("JoueurToPliDefenseur")
}

model ActionJoueur {
  id        Int      @id @default(autoincrement())
  partieId  Int
  joueurId  String
  createdAt DateTime @default(now())
  action    CONTRAT?
  mancheId  Int
  joueur    Joueur   @relation(fields: [joueurId], references: [id])
  manche    Manche   @relation(fields: [mancheId], references: [id])
  partie    Partie   @relation(fields: [partieId], references: [id])
}

model Manche {
  id              Int            @id @default(autoincrement())
  partieId        Int
  preneurId       String?
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  contrat         CONTRAT?
  resultat        RESULTAT?
  scoreDefenseurs Int
  scorePreneur    Int
  chelemAnnonce   Boolean        @default(false)
  chelemRealise   Boolean        @default(false)
  petitAuBout     Boolean        @default(false)
  poigneeAnnoncee POIGNEE?
  roiAppele       Couleur?
  numero          Int            @default(1)
  status          MANCHESTATUS   @default(CONTRACT)
  points          Float          @default(0)
  actionsJoueurs  ActionJoueur[]
  chien           Chien?
  currentPli      CurrentPli?
  partie          Partie         @relation(fields: [partieId], references: [id])
  preneur         Joueur?        @relation("Preneur", fields: [preneurId], references: [id])
  pliDefenseur    PliDefenseur?
  pliPreneur      PliPreneur?
  joueurs         Joueur[]       @relation("JoueurToManche")
}

model PliPreneur {
  id        Int       @id @default(autoincrement())
  mancheId  Int       @unique
  gagnantId String
  status    PLISTATUS @default(ENCOURS)
  points    Float     @default(0)
  cartes    Carte[]
  gagnant   Joueur    @relation("GagnantPliPreneur", fields: [gagnantId], references: [id])
  manche    Manche    @relation(fields: [mancheId], references: [id])
}

model PliDefenseur {
  id       Int       @id @default(autoincrement())
  mancheId Int       @unique
  status   PLISTATUS @default(ENCOURS)
  points   Float     @default(0)
  cartes   Carte[]
  manche   Manche    @relation(fields: [mancheId], references: [id])
  gagnants Joueur[]  @relation("JoueurToPliDefenseur")
}

model CurrentPli {
  id       Int      @id @default(autoincrement())
  mancheId Int      @unique
  cartes   Carte[]
  manche   Manche   @relation(fields: [mancheId], references: [id])
  joueurs  Joueur[] @relation("CurrentPliToJoueur")
}

model Chien {
  id           Int     @id @default(autoincrement())
  mancheId     Int     @unique
  nombreCartes Int
  pointsChien  Float   @default(0)
  cartes       Carte[]
  manche       Manche  @relation(fields: [mancheId], references: [id])
}

model Invitation {
  id             String   @id @default(cuid())
  partieId       Int
  seatIndex      Int
  invitedUserId  String
  invitingUserId String
  status         String
  createdAt      DateTime @default(now())
  partie         Partie   @relation(fields: [partieId], references: [id])
}

enum Couleur {
  PIQUE
  COEUR
  TREFLE
  CARREAU
  ATOUT
  EXCUSE
}

enum CONTRAT {
  PRISE
  GARDE
  GARDESANS
  GARDECONTRE
  PASSE
}

enum RESULTAT {
  GAGNE
  PERDU
}

enum POIGNEE {
  SIMPLE
  DOUBLE
  TRIPLE
}

enum MANCHESTATUS {
  CONTRACT
  ECHANGE
  GAMEPLAY
  FINISHED
}

enum PLISTATUS {
  ENCOURS
  DEFENSEURS
  PRENEUR
}
